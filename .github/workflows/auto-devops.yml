name: Auto DevOps

on:
  workflow_call:
    inputs:
      type:
        type: string
        required: false
        default: application
      build_once:
        type: string
        required: false
        default: 'true'
      autodetect_buildpacks:
        type: string
        required: false
        default: 'true'
      buildpacks:
        type: string
        required: false
      node_version:
        type: string
        required: false
      node_package_manager:
        type: string
        required: false
        default: yarn
      jdk_version:
        type: string
        required: false
      artifact_path:
        type: string
        required: false
      docker_image_name:
        type: string
        required: false
      dockerfile_path:
        type: string
        required: false
      docker_build_context:
        type: string
        required: false
      docker_build_target:
        type: string
        required: false
      docker_build_args:
        type: string
        required: false
      independent_helm_versioning:
        type: string
        required: false
        default: 'false'
      chart_path:
        type: string
        required: false
    secrets:
      sonar_token:
        required: false
      slack_app_token:
        required: false
      slack_bot_token:
        required: false
      slack_signing_secret:
        required: false

env:
  CI: true
  NODE_OPTIONS: "--max_old_space_size=3072"
  NODE_ENV: 'production'
  MAVEN_CLI_OPTS: "-B -Dstyle.color=always -e -fae -ntp -U -V"
  MAVEN_OPTS: "-Xmx1024m -Xms512m -Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss,SSS -Djava.awt.headless=true"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"

jobs:
  build:
    name: Build
    runs-on: actions-runner-set
    outputs:
      buildpacks: ${{ steps.buildpack.outputs.buildpacks }}
    strategy:
      fail-fast: true
      matrix:
        environment: ${{ inputs.build_once && fromJson('[""]') || ((github.ref_name == 'cabal' || github.ref_name == 'fallen' || github.ref_name == 'hive' || github.ref_name == 'taken' || github.ref_name == 'vex') && fromJson(format('["{0}"]', github.ref_name)) || github.ref_name == github.event.repository.default_branch && fromJson('["stg", "live"]')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET cli
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        env:
          DOTNET_INSTALL_DIR: ~/.local/share/dotnet

      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Set up Buildpack
        id: buildpack
        uses: RocketBus/actions/.github/actions/utils/buildpack@v1
        with:
          autodetect: ${{ inputs.autodetect_buildpacks }}
          buildpacks: ${{ inputs.buildpacks }}
        env:
          CHART_PATH: ${{ inputs.chart_path }}

      - name: Build Node.js
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'build'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          node_build_env: ${{ matrix.environment }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path }}

      - name: Build Java
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'build'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path }}

      - name: Build Gradle
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'build'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path }}

      - name: Build Docker
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'docker') }}
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'build'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          version_suffix: ${{ matrix.environment }}
          image_name: ${{ inputs.docker_image_name }}
          dockerfile_path: ${{ inputs.dockerfile_path }}
          docker_build_context: ${{ inputs.docker_build_context }}
          docker_build_target: ${{ inputs.docker_build_target }}
          docker_build_args: ${{ inputs.docker_build_args }}
          docker_scan_fail_build: false
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Build Helm
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'helm') }}
        uses: RocketBus/actions/.github/actions/helm@v1
        with:
          stage: 'build'
          independent_helm_versioning: ${{ inputs.independent_helm_versioning }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          version_suffix: ${{ matrix.environment }}
          chart_path: ${{ inputs.chart_path }}

  test:
    name: Test
    runs-on: actions-runner-set
    needs:
      - build
    env:
      SONAR_TOKEN: ${{ secrets.sonar_token }}
      SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET cli
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        env:
          DOTNET_INSTALL_DIR: ~/.local/share/dotnet

      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Test Node.js
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'test'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
        env:
          NODE_ENV: 'development'

      - name: Test Java
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'test'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Test Gradle
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'test'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

  release:
    name: Release
    if: ${{ github.event_name == 'push' }}
    runs-on: actions-runner-set
    needs:
      - build
      - test
    outputs:
      chart_name: ${{ steps.release_helm.outputs.chart_name }}
      chart_version: ${{ steps.release_helm.outputs.chart_version }} 
    strategy:
      fail-fast: true
      matrix:
        environment: ${{ inputs.build_once && fromJson('[""]') || ((github.ref_name == 'cabal' || github.ref_name == 'fallen' || github.ref_name == 'hive' || github.ref_name == 'taken' || github.ref_name == 'vex') && fromJson(format('["{0}"]', github.ref_name)) || github.ref_name == github.event.repository.default_branch && fromJson('["stg", "live"]')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET cli
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        env:
          DOTNET_INSTALL_DIR: ~/.local/share/dotnet

      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Release Node.js
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'release'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          node_build_env: ${{ matrix.environment }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Java
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'release'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Gradle
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'release'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Docker
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'docker') }}
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'release'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          version_suffix: ${{ matrix.environment }}
          image_name: ${{ inputs.docker_image_name }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Helm
        id: release_helm
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'helm') }}
        uses: RocketBus/actions/.github/actions/helm@v1
        with:
          stage: 'release'
          independent_helm_versioning: ${{ inputs.independent_helm_versioning }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          version_suffix: ${{ matrix.environment }}
          chart_path: ${{ inputs.chart_path }}

  development:
    name: Development
    if: ${{ github.event_name == 'push' && (github.ref_name == 'cabal' || github.ref_name == 'fallen' || github.ref_name == 'hive' || github.ref_name == 'taken' || github.ref_name == 'vex') && inputs.type == 'application' }}
    environment:
      name: ${{ (github.ref_name == 'cabal' || github.ref_name == 'fallen' || github.ref_name == 'hive' || github.ref_name == 'taken' || github.ref_name == 'vex') && github.ref_name }}
    runs-on: actions-runner-set
    needs:
      - release
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy
        uses: RocketBus/actions/.github/actions/helm@v1
        with:
          stage: deploy
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          chart_path: ${{ inputs.chart_path }}
          chart_version: ${{ needs.release.outputs.chart_version }}
          env_spec: ${{ vars.ENV_SPEC }}
          environment: ${{ (github.ref_name == 'cabal' || github.ref_name == 'fallen' || github.ref_name == 'hive' || github.ref_name == 'taken' || github.ref_name == 'vex') && github.ref_name }}

  staging:
    name: Staging
    if: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch && inputs.type == 'application' }}
    environment:
      name: staging
    runs-on: actions-runner-set
    needs:
      - release
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy
        uses: RocketBus/actions/.github/actions/helm@v1
        with:
          stage: deploy
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          version_suffix: ${{ inputs.build_once || 'stg' }}
          chart_path: ${{ inputs.chart_path }}
          chart_version: ${{ needs.release.outputs.chart_version }}
          env_spec: ${{ vars.ENV_SPEC }}
          environment: stg

  zaproxy:
    name: ZAP Scan
    if: ${{ needs.staging.outputs.url }}
    runs-on: actions-runner-set
    needs:
      - staging
    steps:
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.5.1
        with:
          target: ${{ needs.staging.outputs.url }}