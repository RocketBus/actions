name: Auto DevOps

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: false
      git_tag_prefix:
        type: string
        required: false
        default: v
      autodetect_buildpacks:
        type: boolean
        required: false
        default: true
      buildpacks:
        type: string
        required: false
      node_version:
        type: string
        required: false
        default: '18'
      node_package_manager:
        type: string
        required: false
        default: yarn
      jdk_version:
        type: string
        required: false
        default: '17'
      artifact_path:
        type: string
        required: false
      dockerfile:
        type: string
        required: false
        default: 'Dockerfile'
      docker_image_name:
        type: string
        required: false
      docker_build_context:
        type: string
        required: false
        default: '.'
      docker_build_target:
        type: string
        required: false
      docker_build_args:
        type: string
        required: false
      chart_path:
        type: string
        required: false
    secrets:
      sonar_token:
        required: false

env:
  CI: true
  NODE_OPTIONS: "--max_old_space_size=3072"
  NODE_ENV: 'production'
  MAVEN_CLI_OPTS: "-B -Dstyle.color=always -e -fae -ntp -U -V"
  MAVEN_OPTS: "-Xmx1024m -Xms512m -Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss,SSS -Djava.awt.headless=true"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"
  DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name || github.event.repository.name }}
  CHART_PATH: ${{ inputs.chart_path || format('charts/{0}', github.event.repository.name) }}

jobs:
  build:
    name: Build
    runs-on: actions-runner-set
    outputs:
      buildpacks: ${{ steps.buildpack.outputs.buildpacks }}
      gitversion_semver: ${{ steps.gitversion.outputs.semver }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET cli
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        env:
          DOTNET_INSTALL_DIR: ~/.local/share/dotnet
  
      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Set up GitVersion Config File
        shell: bash
        run: echo "$GITVERSION_CONFIG_FILE" > GitVersion.yml
        env:
          GITVERSION_CONFIG_FILE: ${{ vars.GITVERSION_CONFIG_FILE }}
  
      - name: Determine Git Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          additionalArguments: >
            /overrideconfig tag-prefix=${{ inputs.git_tag_prefix }}

      - name: Set up Buildpack
        id: buildpack
        uses: RocketBus/actions/.github/actions/utils/buildpack@v1
        with:
          autodetect: ${{ inputs.autodetect_buildpacks }}
          buildpacks: ${{ inputs.buildpacks }}
        env:
          DOCKERFILE: ${{ inputs.dockerfile }}
          CHART_PATH: ${{ inputs.chart_path }}

      - name: Build Node.js
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'build'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ format('{0}{1}', steps.gitversion.outputs.semver, inputs.environment && format('-{0}', inputs.environment)) }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          node_build_env: ${{ inputs.environment }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path || 'build/' }}

      - name: Build Java
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'build'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ steps.gitversion.outputs.semver }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path || '**/target/*.jar' }}

      - name: Build Gradle
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'build'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path || '**/build/libs/*.jar' }}

      - name: Build Docker
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'docker') }}
        id: build_docker
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'build'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          image_name: ${{ env.DOCKER_IMAGE_NAME }}
          image_tag: ${{ format('{0}{1}', steps.gitversion.outputs.semver, inputs.environment && format('-{0}', inputs.environment)) }}
          dockerfile: ${{ inputs.dockerfile }}
          docker_build_context: ${{ inputs.docker_build_context }}
          docker_build_target: ${{ inputs.docker_build_target }}
          docker_build_args: ${{ inputs.docker_build_args }}
          docker_scan_fail_build: false
          docker_scan_severity_cutoff: low
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Build Chart
        if: ${{ contains(fromJSON(steps.buildpack.outputs.buildpacks), 'chart') }}
        id: build_chart
        uses: RocketBus/actions/.github/actions/chart@v1
        with:
          stage: 'build'
          helm_version: ${{ vars.HELM_VERSION }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          chart_path: ${{ env.CHART_PATH }}
          chart_version: ${{ steps.gitversion.outputs.semver }}
          app_version: ${{ steps.build_docker.outputs.image_tag }}

  test:
    name: Test
    runs-on: actions-runner-set
    needs:
      - build
    env:
      SONAR_TOKEN: ${{ secrets.sonar_token }}
      SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Test Node.js
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'test'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ format('{0}{1}', needs.build.outputs.gitversion_semver, inputs.environment && format('-{0}', inputs.environment)) }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
        env:
          NODE_ENV: 'development'

      - name: Test Java
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'test'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.build.outputs.gitversion_semver }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Test Gradle
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'test'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

  release:
    name: Release
    runs-on: actions-runner-set
    needs:
      - build
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Release Node.js
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'release'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ format('{0}{1}', needs.build.outputs.gitversion_semver, inputs.environment && format('-{0}', inputs.environment)) }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          node_build_env: ${{ inputs.environment }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Java
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'release'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.build.outputs.gitversion_semver }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Gradle
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'release'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Docker
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'docker') }}
        id: release_docker
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'release'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          image_name: ${{ env.DOCKER_IMAGE_NAME }}
          image_tag: ${{ format('{0}{1}', needs.build.outputs.gitversion_semver, inputs.environment && format('-{0}', inputs.environment)) }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Chart
        if: ${{ contains(fromJSON(needs.build.outputs.buildpacks), 'chart') }}
        uses: RocketBus/actions/.github/actions/chart@v1
        with:
          stage: 'release'
          helm_version: ${{ vars.HELM_VERSION }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          environment: ${{ inputs.environment }}
          chart_path: ${{ env.CHART_PATH }}
          chart_version: ${{ needs.build.outputs.gitversion_semver }}
          app_version: ${{ steps.release_docker.outputs.image_tag }}

      - name: Git Push Changes
        if: ${{ github.ref_name == github.event.repository.default_branch }}
        shell: bash
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"
          git commit -a -m "chore: release $VERSION [skip ci]" || echo "nothing to commit, proceed"
          git push
        env:
          VERSION: ${{ format('{0}{1}', inputs.git_tag_prefix, needs.build.outputs.gitversion_semver) }}

      - name: GitHub Release
        if: ${{ github.ref_name == github.event.repository.default_branch }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ format('{0}{1}', inputs.git_tag_prefix, needs.build.outputs.gitversion_semver) }}