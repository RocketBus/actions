name: Auto DevOps

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: false
      git_tag_prefix:
        type: string
        required: false
        default: v
      autodetect_buildpacks:
        type: boolean
        required: false
        default: true
      buildpacks:
        type: string
        required: false
      php_version:
        type: string
        required: false
        default: '7.2'
      node_version:
        type: string
        required: false
        default: '18'
      node_package_manager:
        type: string
        required: false
        default: yarn
      jdk_version:
        type: string
        required: false
        default: '17'
      maven_cli_opts:
        type: string
        required: false
        default: ''
      artifact_path:
        type: string
        required: false
      scan_fail_build:
        type: boolean
        required: false
        default: true
      dockerfile:
        type: string
        required: false
        default: 'Dockerfile'
      docker_image_name:
        type: string
        required: false
      docker_build_context:
        type: string
        required: false
        default: '.'
      docker_build_target:
        type: string
        required: false
      docker_build_args:
        type: string
        required: false
      chart_path:
        type: string
        required: false
      lint_disabled:
        type: boolean
        required: false
        default: false
      test_disabled:
        type: boolean
        required: false
        default: false
      build_disabled:
        type: boolean
        required: false
        default: false
      docker_disabled:
        type: boolean
        required: false
        default: false
      git_release_disabled:
        type: boolean
        required: false
        default: false

concurrency:
  group: ${{ format('{0}-{1}{2}', github.workflow, github.ref_name, inputs.environment && format('-{0}', inputs.environment)) }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write
  actions: read

env:
  CI: true
  NODE_OPTIONS: "--max_old_space_size=4096"
  MAVEN_CLI_OPTS: "${{ inputs.maven_cli_opts }} -B -Dstyle.color=always -e -fae -ntp -U -V"
  MAVEN_OPTS: "-Xmx1024m -Xms512m -Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss,SSS -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djansi.force=true"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"
  DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name || github.event.repository.name }}
  CHART_PATH: ${{ inputs.chart_path || format('charts/{0}', github.event.repository.name) }}

jobs:
  preflight:
    name: Preflight
    runs-on: actions-runner-set
    outputs:
      buildpacks: ${{ steps.buildpack.outputs.buildpacks }}
      gitversion_semver: ${{ steps.gitversion.outputs.semVer }}
      gitversion_majorminorpatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET cli
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
        env:
          DOTNET_INSTALL_DIR: ~/.local/share/dotnet
  
      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Set up GitVersion Config File
        shell: bash
        run: echo "$GITVERSION_CONFIG_FILE" > GitVersion.yml
        env:
          GITVERSION_CONFIG_FILE: ${{ vars.GITVERSION_CONFIG_FILE }}
  
      - name: Determine Git Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          additionalArguments: >
            /overrideconfig tag-prefix=${{ inputs.git_tag_prefix }}

      - name: Update Job Summary
        run: |
          echo ":rocket: $VERSION" >> $GITHUB_STEP_SUMMARY
        env:
          VERSION: ${{ steps.gitversion.outputs.semVer }}

      - name: Set up Buildpack
        id: buildpack
        uses: RocketBus/actions/.github/actions/utils/buildpack@v1
        with:
          autodetect: ${{ inputs.autodetect_buildpacks }}
          buildpacks: ${{ inputs.buildpacks }}
        env:
          DOCKERFILE: ${{ inputs.dockerfile }}
          CHART_PATH: ${{ inputs.chart_path }}
    
  lint:
    name: Lint
    if: ${{ !inputs.lint_disabled }}
    runs-on: actions-runner-set
    needs: 
      - preflight
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint PHP
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'php') }}
        uses: RocketBus/actions/.github/actions/php@v1
        with:
          stage: 'lint'
          php_version: ${{ inputs.php_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
        env:
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Lint Node.js
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'lint'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Lint Java
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'lint'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Lint Gradle
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'lint'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Lint Docker
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'docker') }}
        id: build_docker
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'lint'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          image_name: ${{ env.DOCKER_IMAGE_NAME }}
          image_tag: ${{ format('{0}{1}', needs.preflight.outputs.gitversion_semver, inputs.environment && format('-{0}', inputs.environment)) }}
          dockerfile: ${{ inputs.dockerfile }}

      - name: Lint Chart
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'chart') }}
        uses: RocketBus/actions/.github/actions/chart@v1
        with:
          stage: 'lint'
          helm_version: ${{ vars.HELM_VERSION }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          chart_path: ${{ env.CHART_PATH }}
          chart_version: ${{ needs.preflight.outputs.gitversion_semver }}
          app_version: ${{ steps.build_docker.outputs.image_tag }}

  test:
    name: Test
    if: ${{ (github.event_name == 'pull_request' || github.ref_name == github.event.repository.default_branch) && !inputs.test_disabled }}
    runs-on: actions-runner-set
    needs:
      - preflight
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Test PHP
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'php') }}
        uses: RocketBus/actions/.github/actions/php@v1
        with:
          stage: 'test'
          php_version: ${{ inputs.php_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
        env:
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Test Node.js
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'test'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Test Java
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'test'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Test Gradle
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'test'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Set up SonarQube Args
        id: setup_sonar_args
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'nodejs') || contains(fromJSON(needs.preflight.outputs.buildpacks), 'php') }}
        shell: bash
        run: |
          if [[ $EVENT_NAME == 'pull_request' ]]; then
            SONAR_ARGS="-Dsonar.pullrequest.key=$PR_NUMBER \
              -Dsonar.pullrequest.branch=$HEAD_REF \
              -Dsonar.pullrequest.base=$BASE_REF \
              -Dsonar.pullrequest.github.repository=$GITHUB_REPOSITORY"
          elif [[ $EVENT_NAME == 'push' && $REF_NAME != $DEFAULT_BRANCH ]]; then
            SONAR_ARGS="-Dsonar.branch.name=$REF_NAME"
          fi

          echo "args=$SONAR_ARGS" >> $GITHUB_OUTPUT
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REF_NAME: ${{ github.ref_name }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

      - name: SonarQube Scan
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'nodejs') || contains(fromJSON(needs.preflight.outputs.buildpacks), 'php') }}
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          args: ${{ steps.setup_sonar_args.outputs.args }}

      - name: SonarQube Quality Gate Check
        if: ${{ (contains(fromJSON(needs.preflight.outputs.buildpacks), 'nodejs') || contains(fromJSON(needs.preflight.outputs.buildpacks), 'php')) && github.event_name == 'pull_request' }}
        uses: sonarsource/sonarqube-quality-gate-action@master

      - name: SonarQube Java
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'sonarqube'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

      - name: SonarQube Gradle
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'sonarqube'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}

  build:
    name: Build
    runs-on: actions-runner-set
    if: ${{ always() && needs.preflight.result == 'success' && (needs.lint.result == 'success' || needs.lint.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    needs: 
      - preflight
      - lint
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build PHP
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'php') && !inputs.build_disabled }}
        uses: RocketBus/actions/.github/actions/php@v1
        with:
          stage: 'build'
          php_version: ${{ inputs.php_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path || 'app-artifact.tar.gz' }}
        env:
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Build Node.js
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'nodejs') && !inputs.build_disabled }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'build'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          node_build_env: ${{ inputs.environment }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path || 'build/' }}

      - name: Build Java
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'java') && !inputs.build_disabled }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'build'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path || '**/target/*.jar' }}

      - name: Build Gradle
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'gradle') && !inputs.build_disabled }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'build'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          artifact_path: ${{ inputs.artifact_path || '**/build/libs/*.jar' }}

      - name: Build Docker
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'docker') && !inputs.docker_disabled }}
        id: build_docker
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'build'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          image_name: ${{ env.DOCKER_IMAGE_NAME }}
          image_tag: ${{ format('{0}{1}', needs.preflight.outputs.gitversion_semver, inputs.environment && format('-{0}', inputs.environment)) }}
          dockerfile: ${{ inputs.dockerfile }}
          docker_build_context: ${{ inputs.docker_build_context }}
          docker_build_target: ${{ inputs.docker_build_target }}
          docker_build_args: ${{ inputs.docker_build_args }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Build Chart
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'chart') }}
        uses: RocketBus/actions/.github/actions/chart@v1
        with:
          stage: 'build'
          helm_version: ${{ vars.HELM_VERSION }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          chart_path: ${{ env.CHART_PATH }}
          chart_version: ${{ needs.preflight.outputs.gitversion_semver }}
          app_version: ${{ steps.build_docker.outputs.image_tag }}

      - name: Create SBOM File
        uses: anchore/sbom-action@v0
        with:
          path: '.'
          format: spdx-json
          output-file: sbom.spdx.json
          artifact-name: sbom.spdx.json
          upload-artifact-retention: 1d

  sca:
    name: Software Composition Analysis
    if: ${{ always() && (github.event_name == 'pull_request' || github.ref_name == github.event.repository.default_branch) && needs.preflight.result == 'success' && (needs.lint.result == 'success' || needs.lint.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.build.result == 'success' || needs.build.result == 'skipped') }}
    runs-on: actions-runner-set
    needs: 
      - preflight
      - lint
      - test
      - build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: sbom.spdx.json

      - name: Scan SBOM
        id: scan
        uses: anchore/scan-action@v3
        with:
          sbom: sbom.spdx.json
          fail-build: ${{ inputs.scan_fail_build }}
          severity-cutoff: low
          output-format: table
          only-fixed: true
          add-cpes-if-none: true

  release:
    name: Release
    if: ${{ always() && needs.preflight.result == 'success' && (needs.lint.result == 'success' || needs.lint.result == 'skipped') && needs.build.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.sca.result == 'success' || needs.sca.result == 'skipped') }}
    runs-on: actions-runner-set
    needs:
      - preflight
      - lint
      - test
      - build
      - sca
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Sync Repo
        if: ${{ github.ref_name == github.event.repository.default_branch && !inputs.git_release_disabled }} 
        shell: bash
        run: git pull

      - name: Release Node.js
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'nodejs') }}
        uses: RocketBus/actions/.github/actions/nodejs@v1
        with:
          stage: 'release'
          node_version: ${{ inputs.node_version }}
          yarnrc: ${{ vars.YARNRC }}
          npmrc: ${{ vars.NPMRC }}
          node_package_manager: ${{ inputs.node_package_manager }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          package_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          node_build_env: ${{ inputs.environment }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Java
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'java') }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'release'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Gradle
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'gradle') }}
        uses: RocketBus/actions/.github/actions/gradle@v1
        with:
          stage: 'release'
          jdk_version: ${{ inputs.jdk_version }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Docker
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'docker') }}
        id: release_docker
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'release'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          image_name: ${{ env.DOCKER_IMAGE_NAME }}
          image_tag: ${{ format('{0}{1}', needs.preflight.outputs.gitversion_semver, inputs.environment && format('-{0}', inputs.environment)) }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Release Chart
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'chart') }}
        uses: RocketBus/actions/.github/actions/chart@v1
        with:
          stage: 'release'
          helm_version: ${{ vars.HELM_VERSION }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          environment: ${{ (contains(fromJSON('["cabal", "fallen", "hive", "taken", "vex"]'), github.ref_name) && github.ref_name) || inputs.environment || '' }}
          chart_path: ${{ env.CHART_PATH }}
          chart_version: ${{ needs.preflight.outputs.gitversion_semver }}
          app_version: ${{ steps.release_docker.outputs.image_tag }}

      - name: Git Push Changes
        if: ${{ github.ref_name == github.event.repository.default_branch && !inputs.git_release_disabled }}
        shell: bash
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"
          git commit -a -m "chore: release $VERSION [skip ci]" || echo "nothing to commit, proceed"
          git push
        env:
          VERSION: ${{ format('{0}{1}', inputs.git_tag_prefix, needs.preflight.outputs.gitversion_semver) }}

      - name: GitHub Release
        if: ${{ github.ref_name == github.event.repository.default_branch && !inputs.git_release_disabled }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ format('{0}{1}', inputs.git_tag_prefix, needs.preflight.outputs.gitversion_semver) }}

      - name: Clean up Java
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'java') && (cancelled() || failure()) }}
        uses: RocketBus/actions/.github/actions/java@v1
        with:
          stage: 'cleanup'
          jdk_version: ${{ inputs.jdk_version }}
          maven_settings: ${{ vars.MAVEN_SETTINGS }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          artifact_version: ${{ needs.preflight.outputs.gitversion_majorminorpatch }}
          codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
          codeartifact_domain_owner: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}
          codeartifact_region: ${{ vars.CODEARTIFACT_REGION }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Clean up Docker
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'docker') && (cancelled() || failure()) }}
        uses: RocketBus/actions/.github/actions/docker@v1
        with:
          stage: 'cleanup'
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          image_name: ${{ env.DOCKER_IMAGE_NAME }}
          image_tag: ${{ format('{0}{1}', needs.preflight.outputs.gitversion_semver, inputs.environment && format('-{0}', inputs.environment)) }}
          artifact_bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          artifact_bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}

      - name: Clean up Chart
        if: ${{ contains(fromJSON(needs.preflight.outputs.buildpacks), 'chart') && (cancelled() || failure()) }}
        uses: RocketBus/actions/.github/actions/chart@v1
        with:
          stage: 'cleanup'
          helm_version: ${{ vars.HELM_VERSION }}
          ecr_region: ${{ vars.ECR_REGION }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          environment: ${{ (contains(fromJSON('["cabal", "fallen", "hive", "taken", "vex"]'), github.ref_name) && github.ref_name) || inputs.environment || '' }}
          chart_path: ${{ env.CHART_PATH }}
          chart_version: ${{ needs.preflight.outputs.gitversion_semver }}
          app_version: ${{ steps.release_docker.outputs.image_tag }}
