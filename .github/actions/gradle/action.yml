name: 'Gradle CI'
description: ''

inputs:
  stage:
    description: ''
    required: true
  jdk_version:
    description: ''
    required: true
  codeartifact_region:
    description: ''
    required: true
  actions_iam_role:
    description: ''
    required: true
  codeartifact_domain:
    description: ''
    required: true
  codeartifact_domain_owner:
    description: ''
    required: true
  artifact_bucket_region:
    description: ''
    required: true
  artifact_bucket_name:
    description: ''
    required: true
  artifact_path:
    description: ''
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.jdk_version }}
        distribution: 'corretto'
        cache: 'gradle'
        overwrite-settings: false

    - name: Set up CodeArtifact Authorization Token
      uses: RocketBus/actions/.github/actions/utils/codeartifact@v1
      with:
        codeartifact_region: ${{ inputs.codeartifact_region }}
        actions_iam_role: ${{ inputs.actions_iam_role }}
        codeartifact_domain: ${{ inputs.codeartifact_domain }}
        codeartifact_domain_owner: ${{ inputs.codeartifact_domain_owner }}

    - name: Lint
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: ./gradlew spotlessCheck

    - name: Build Artifact
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: ./gradlew build -x spotlessCheck -x test

    - name: Archive Application Artifact
      if: ${{ inputs.stage == 'build' }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-upload@v1
      with:
        name: app-artifact
        paths: ${{ inputs.artifact_path }}
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    - name: Run Tests
      if: ${{ inputs.stage == 'test' }}
      shell: bash
      run: ./gradlew test jacocoTestReport

    - name: Set up JDK for SonarQube
      if: ${{ inputs.stage == 'test' }}
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'corretto'
        cache: 'gradle'
        overwrite-settings: false

    - name: SonarQube Scan
      if: ${{ inputs.stage == 'test' }}
      shell: bash
      run: |
        if [[ $EVENT_NAME == 'pull_request' ]]; then
          SONAR_ARGS="-Dsonar.pullrequest.key=$PR_NUMBER \
            -Dsonar.pullrequest.branch=$HEAD_REF \
            -Dsonar.pullrequest.base=$BASE_REF \
            -Dsonar.pullrequest.github.repository=$GITHUB_REPOSITORY"
        elif [[ $EVENT_NAME == 'push' && $REF_NAME != $DEFAULT_BRANCH ]]; then
          SONAR_ARGS="-Dsonar.branch.name=$REF_NAME"
        fi

        ./gradlew sonar $SONAR_ARGS
      env:
        EVENT_NAME: ${{ github.event_name }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        HEAD_REF: ${{ github.head_ref }}
        BASE_REF: ${{ github.base_ref }}
        REF_NAME: ${{ github.ref_name }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

    - name: SonarQube Quality Gate Check
      if: ${{ inputs.stage == 'test' }}
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        scanMetadataReportFile: build/sonar/report-task.txt

    - name: Download Application Artifact
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-download@v1
      with:
        name: app-artifact
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    - name: Release Artifact
      id: release
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      shell: bash
      run: ./gradlew publish