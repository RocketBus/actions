name: 'Deploy'
description: 'Deploy on Kubernetes'

runs:
  using: "composite"
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure AWS Credentials for Helm Package
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ env.ECR_REGION }}
        role-to-assume: ${{ env.GITHUB_ACTIONS_IAM_ROLE }}
        role-session-name: GitHubActionsECRSession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login_ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Pull Helm Package
      shell: bash
      run: helm pull --untar --untardir deploy --version ${CHART_VERSION}${VERSION_SUFFIX} oci://${{ steps.login_ecr.outputs.registry }}/helm-charts/${CHART_NAME}

    - name: Get Environment Specs
      id: environment_specs
      shell: bash
      run: |
        echo aws-region=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-region"') >> $GITHUB_OUTPUT
        echo aws-iam-role=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-iam-role"') >> $GITHUB_OUTPUT
        echo cluster-name=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."cluster-name"') >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ steps.environment_specs.outputs.aws-region }}
        role-to-assume: ${{ steps.environment_specs.outputs.aws-iam-role }}
        role-session-name: GitHubActionsDeploySession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Update Kubeconfig
      shell: bash
      run: aws eks update-kubeconfig --name $CLUSTER_NAME
      env:
        CLUSTER_NAME: ${{ steps.environment_specs.outputs.cluster-name }}

    - name: Helm Upgrade
      shell: bash
      run: |
        ENVIRONMENT_PATH=${CHART_PATH}/${CHART_NAME}/environments/${ENVIRONMENT}
        ENVIRONMENT_SECRETS_DIR=${ENVIRONMENT_PATH}/secrets.d
        ENVIRONMENT_VALUES_DIR=${ENVIRONMENT_PATH}/values.d

        HELM_ARGS="--wait --cleanup-on-fail --history-max 3"

        if [[ -f ${ENVIRONMENT_PATH}/helmspec.yaml ]]; then
          RELEASE_NAME=$(yq '.releaseName | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
          RELEASE_NAMESPACE=$(yq '.releaseNamespace | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
        fi

        if [[ -d $ENVIRONMENT_SECRETS_DIR ]]; then
          for SECRET_FILE in $(ls $ENVIRONMENT_SECRETS_DIR); do
            sops -d $ENVIRONMENT_SECRETS_DIR/$SECRET_FILE > $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec"
          done
        fi

        if [[ -d $ENVIRONMENT_VALUES_DIR ]]; then
          for VALUES_FILE in $(ls $ENVIRONMENT_VALUES_DIR); do
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES_DIR/$VALUES_FILE"
          done
        fi

        if [[ -f ${ENVIRONMENT_PATH}/secrets.yaml ]]; then
          ENVIRONMENT_SECRETS="${ENVIRONMENT_PATH}/secrets.yaml"
          sops -d $ENVIRONMENT_SECRETS > ${ENVIRONMENT_SECRETS}.dec
          HELM_ARGS="$HELM_ARGS -f ${ENVIRONMENT_SECRETS}.dec"
        fi

        if [[ -f ${ENVIRONMENT_PATH}/values.yaml ]]; then
          ENVIRONMENT_VALUES="${ENVIRONMENT_PATH}/values.yaml"
          HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES"
        fi

        RELEASE_NAME=${RELEASE_NAME:-$CHART_NAME}
        RELEASE_NAMESPACE=${RELEASE_NAMESPACE:-$CHART_NAME}

        helm upgrade $RELEASE_NAME deploy/$CHART_NAME \
          --install \
          --namespace $RELEASE_NAMESPACE $HELM_ARGS