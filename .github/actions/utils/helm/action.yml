name: 'Helm Upgrade and Rollback'
description: ''

inputs:
  stage:
    description: ''
    required: true
  helm_version:
    description: ''
    required: true
  ecr_region:
    description: ''
    required: true
  actions_iam_role:
    description: ''
    required: true
  chart_repository:
    description: ''
    required: false
  chart_name:
    description: ''
    required: true
  chart_version:
    description: ''
    required: false
  env_spec:
    description: ''
    required: true
  environment:
    description: ''
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ inputs.helm_version }}

    - name: Configure AWS Credentials
      if: ${{ inputs.stage == 'deploy' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.ecr_region }}
        role-to-assume: ${{ inputs.actions_iam_role }}
        role-session-name: GitHubActionsECRSession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      if: ${{ inputs.stage == 'deploy' }}
      id: login_ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Pull Helm Package
      if: ${{ inputs.stage == 'deploy' }}
      shell: bash
      run: |
        HELM_ARGS="--untar --devel ${CHART_VERSION:+--version $CHART_VERSION}"
        
        REPOSITORY=${REPOSITORY}/${CHART_NAME}

        helm pull $HELM_ARGS oci://$REGISTRY/$REPOSITORY
      env:
        REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.chart_repository }}
        CHART_NAME: ${{ inputs.chart_name }}
        CHART_VERSION: ${{ inputs.chart_version }}

    - name: Get Environment Specs
      id: environment_specs
      shell: bash
      run: |
        echo aws_region=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-region"') >> $GITHUB_OUTPUT
        echo aws_iam_role=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-iam-role"') >> $GITHUB_OUTPUT
        echo cluster_name=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."cluster-name"') >> $GITHUB_OUTPUT
      env:
        ENV_SPEC: ${{ inputs.env_spec }}
        ENVIRONMENT: ${{ inputs.environment }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ steps.environment_specs.outputs.aws_region }}
        role-to-assume: ${{ steps.environment_specs.outputs.aws_iam_role }}
        role-session-name: GitHubActionsHelmSession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Update Kubeconfig
      shell: bash
      run: aws eks update-kubeconfig --name $CLUSTER_NAME
      env:
        CLUSTER_NAME: ${{ steps.environment_specs.outputs.cluster_name }}

    - name: Helm Upgrade
      if: ${{ inputs.stage == 'deploy' }}
      shell: bash
      run: |
        echo "environments/" >> ${CHART_NAME}/.helmignore
        if [ -d "${CHART_NAME}/environments/${ENVIRONMENT}" ]; then
            ENVIRONMENT_PATH="${CHART_NAME}/environments/${ENVIRONMENT}"
            [ "${ENVIRONMENT}" == "stg" ] && rm -rf ${CHART_NAME}/environments/live
            [ "${ENVIRONMENT}" == "live" ] && rm -rf ${CHART_NAME}/environments/stg
        else
            ENVIRONMENT_PATH="${ENVIRONMENTS_PATH}/${ENVIRONMENT}"
        fi

        ENVIRONMENT_SECRETS_DIR=${ENVIRONMENT_PATH}/secrets.d
        ENVIRONMENT_VALUES_DIR=${ENVIRONMENT_PATH}/values.d
        HELM_ARGS="--timeout 10m --wait --cleanup-on-fail --history-max 3"       

        if [[ -f ${ENVIRONMENT_PATH}/helmspec.yaml ]]; then
          RELEASE_NAME=$(yq '.releaseName // ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
          RELEASE_NAMESPACE=$(yq '.releaseNamespace // ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
        fi

        if [[ -d $ENVIRONMENT_SECRETS_DIR ]]; then
          for SECRET_FILE in $(ls $ENVIRONMENT_SECRETS_DIR); do
            sops -d $ENVIRONMENT_SECRETS_DIR/$SECRET_FILE > $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec"
          done
        fi

        if [[ -d $ENVIRONMENT_VALUES_DIR ]]; then
          for VALUES_FILE in $(ls $ENVIRONMENT_VALUES_DIR); do
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES_DIR/$VALUES_FILE"
          done
        fi

        if [[ -f ${ENVIRONMENT_PATH}/secrets.yaml ]]; then
          ENVIRONMENT_SECRETS="${ENVIRONMENT_PATH}/secrets.yaml"
          sops -d $ENVIRONMENT_SECRETS > ${ENVIRONMENT_SECRETS}.dec
          HELM_ARGS="$HELM_ARGS -f ${ENVIRONMENT_SECRETS}.dec"
        fi

        if [[ -f ${ENVIRONMENT_PATH}/values.yaml ]]; then
          ENVIRONMENT_VALUES="${ENVIRONMENT_PATH}/values.yaml"
          HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES"
        fi

        CHART=$CHART_NAME
        RELEASE_NAME=${RELEASE_NAME:-$CHART_NAME}
        RELEASE_NAMESPACE=${RELEASE_NAMESPACE:-$CHART_NAME}

        helm upgrade $RELEASE_NAME $CHART_NAME \
          --install \
          --namespace $RELEASE_NAMESPACE $HELM_ARGS
      env:
        ENVIRONMENTS_PATH: ${{ format('{0}/environments', inputs.chart_name) }}
        ENVIRONMENT: ${{ inputs.environment }}
        CHART_NAME: ${{ inputs.chart_name }}

    - name: Helm Rollback
      if: ${{ inputs.stage == 'rollback' }}
      shell: bash
      run: |
        if [ -d "${CHART_NAME}/environments/${ENVIRONMENT}" ]; then
            ENVIRONMENT_PATH="${CHART_NAME}/environments/${ENVIRONMENT}"
        else
            ENVIRONMENT_PATH="${ENVIRONMENTS_PATH}/${ENVIRONMENT}"
        fi

        if [[ -f ${ENVIRONMENT_PATH}/helmspec.yaml ]]; then
          RELEASE_NAME=$(yq '.releaseName | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
          RELEASE_NAMESPACE=$(yq '.releaseNamespace | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
        fi

        RELEASE_NAME=${RELEASE_NAME:-$CHART_NAME}
        RELEASE_NAMESPACE=${RELEASE_NAMESPACE:-$CHART_NAME}

        RELEASE_REVISION=$(helm history $RELEASE_NAME -o json -n $RELEASE_NAMESPACE | jq -r --arg CHART $CHART_NAME-$CHART_VERSION '.[] | select(.chart == $CHART).revision')
        helm rollback $RELEASE_NAME $RELEASE_REVISION --wait --cleanup-on-fail -n $RELEASE_NAMESPACE
      env:
        ENVIRONMENTS_PATH: ${{ format('charts/{0}/environments', inputs.chart_name) }}
        ENVIRONMENT: ${{ inputs.environment }}
        CHART_NAME: ${{ inputs.chart_name }}
