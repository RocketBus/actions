name: 'Helm Chart CI'
description: ''

inputs:
  stage:
    description: ''
    required: true
  helm_version:
    description: ''
    required: true
  ecr_region:
    description: ''
    required: true
  actions_iam_role:
    description: ''
    required: true
  environment:
    description: ''
    required: false
  chart_path:
    description: ''
    required: true
  chart_version:
    description: ''
    required: false
  app_version:
    description: ''
    required: false

runs:
  using: "composite"
  steps:
    - name: Chart Metadata
      id: chart_metadata
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: |
        echo name=$(yq '.name' Chart.yaml) >> $GITHUB_OUTPUT
        echo version=$CHART_VERSION >> $GITHUB_OUTPUT
      env:
        CHART_VERSION: ${{ inputs.chart_version }}

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ inputs.helm_version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.ecr_region }}
        role-to-assume: ${{ inputs.actions_iam_role }}
        role-session-name: GitHubActionsECRSession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login_ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Install Dependencies
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: helm dependency build

    - name: Release Prepare
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: |
        if [[ -n $APP_VERSION ]]; then
          yq -i '.appVersion = env(APP_VERSION)' Chart.yaml
          yq -i '.global.image.tag = env(APP_VERSION)' values.yaml
        fi

        yq -i '.version = env(CHART_VERSION)' Chart.yaml
      env:
        CHART_VERSION: ${{ steps.chart_metadata.outputs.version }}
        APP_VERSION: ${{ inputs.app_version }}

    - name: Helm Lint
      if: ${{ inputs.stage == 'lint' }}
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: helm lint --strict --with-subcharts

    - name: Release Artifact
      if: ${{ inputs.stage == 'release' }}
      working-directory: ${{ inputs.chart_path }}
      id: chart_release
      shell: bash
      run: |
        shopt -s globstar extglob

        if [[ $REF_NAME == $DEFAULT_BRANCH ]]; then
          REPOSITORY=helm-charts/stable${ENVIRONMENT:+/$ENVIRONMENT}
        else
          REPOSITORY=helm-charts/unstable${ENVIRONMENT:+/$ENVIRONMENT}
        fi

        if [[ -d environments ]]; then
          TEMP_DIR=$(mktemp -d)
          cp -r environments $TEMP_DIR     
          if [[ $REF_NAME == $DEFAULT_BRANCH ]]; then
            [[ $ENVIRONMENT == "staging" ]] && rm -f -r -v environments/!(stg)
            [[ $ENVIRONMENT == "live" ]] && rm -f -r -v environments/!(live)
            [[ -z $ENVIRONMENT ]] && rm -f -r -v environments/!(dev|stg|live)
          else
            rm -f -r -v environments/!(${ENVIRONMENT:-dev})
          fi
        fi

        helm package .

        helm push ${CHART_NAME}-${CHART_VERSION}.tgz oci://$REGISTRY/$REPOSITORY

        if [[ -d environments ]]; then
          cp -r $TEMP_DIR/environments/* environments/
        fi
      env:
        REF_NAME: ${{ github.ref_name }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        ENVIRONMENT: ${{ inputs.environment }}
        CHART_NAME: ${{ steps.chart_metadata.outputs.name }}
        CHART_VERSION: ${{ steps.chart_metadata.outputs.version }}

    - name: Clean up Release
      if: ${{ inputs.stage == 'cleanup' && (cancelled() || failure()) }}
      shell: bash
      run: |
        shopt -s globstar extglob

        if [[ $REF_NAME == $DEFAULT_BRANCH ]]; then
          REPOSITORY=helm-charts/stable${ENVIRONMENT:+/$ENVIRONMENT}/$CHART_NAME
        else
          REPOSITORY=helm-charts/unstable${ENVIRONMENT:+/$ENVIRONMENT}/$CHART_NAME
        fi

        aws ecr describe-images \
          --repository-name $REPOSITORY \
          --image-ids imageTag=$CHART_VERSION > /dev/null \
        && \
        aws ecr batch-delete-image \
          --repository-name $REPOSITORY \
          --image-ids imageTag=$CHART_VERSION
      env:
        REF_NAME: ${{ github.ref_name }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        ENVIRONMENT: ${{ inputs.environment }}
        CHART_NAME: ${{ steps.chart_metadata.outputs.name }}
        CHART_VERSION: ${{ steps.chart_metadata.outputs.version }}