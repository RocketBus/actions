name: 'Helm CI/CD'
description: ''

inputs:
  stage:
    description: ''
    required: true
  helm_version:
    description: ''
    required: false
  independent_helm_versioning:
    description: ''
    required: false
    default: 'false'
  ecr_region:
    description: ''
    required: true
  actions_iam_role:
    description: ''
    required: true
  version_suffix:
    description: ''
    required: false
  chart_path:
    description: ''
    required: false
  chart_name:
    description: ''
    required: false
  chart_version:
    description: ''
    required: false
  env_spec:
    description: ''
    required: false
  environment:
    description: ''
    required: false
  environments_path:
    description: ''
    required: false

outputs:
  chart_name:
    description: ''
    value: ${{ steps.chart_metadata.outputs.name }}
  chart_version:
    description: ''
    value: ${{ steps.release_prepare.outputs.chart_version }}

runs:
  using: "composite"
  steps:
    - name: Chart Metadata
      id: chart_metadata
      if: ${{ inputs.stage == 'build' || inputs.stage == 'test' || inputs.stage == 'release' }}
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: |
        CHART_NAME=$(yq '.name' Chart.yaml)
        echo name=$CHART_NAME >> $GITHUB_OUTPUT

    - name: Determine Version
      id: gitversion
      if: ${{ (inputs.stage == 'build' || inputs.stage == 'test' || inputs.stage == 'release') && inputs.independent_helm_versioning }}
      uses: gittools/actions/gitversion/execute@v0
      with:
        additionalArguments: >
          /overrideconfig major-version-bump-message="^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\([\\w\\s-]*\\))?(!:|:.*\\n\\n((.+\\n)+\\n)?BREAKING CHANGE:\\s.+)"
          /overrideconfig minor-version-bump-message="^(feat)(\\([\\w\\s-]*\\))?:"
          /overrideconfig patch-version-bump-message="^(build|chore|ci|docs|fix|perf|refactor|revert|style|test)(\\([\\w\\s-]*\\))?:"
          /overrideconfig tag-prefix=${{ steps.chart_metadata.outputs.name }}-

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ inputs.helm_version || '3.12.2' }}

    - name: Configure AWS Credentials
      if: ${{ inputs.stage == 'build' || inputs.stage == 'test' || inputs.stage == 'release' || (inputs.stage == 'deploy' && inputs.chart_path) }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ inputs.ecr_region }}
        role-to-assume: ${{ inputs.actions_iam_role }}
        role-session-name: GitHubActionsECRSession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login_ecr
      if: ${{ inputs.stage == 'build' || inputs.stage == 'test' || inputs.stage == 'release' || (inputs.stage == 'deploy' && inputs.chart_path) }}
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install Dependencies
      if: ${{ inputs.chart_path }}
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: helm dep up .

    - name: Helm Lint
      if: ${{ inputs.stage == 'build' }}
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: helm lint --strict --with-subcharts .

    - name: Release Prepare
      id: release_prepare
      if: ${{ inputs.stage == 'build' || inputs.stage == 'test' || inputs.stage == 'release' || (inputs.stage == 'deploy' && inputs.chart_path) }}
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: |
        if [[ -n $DOCKER_METADATA_OUTPUT_VERSION ]]; then
          yq -i '.appVersion = env(DOCKER_METADATA_OUTPUT_VERSION)' Chart.yaml
        fi

        if [[ -z $CHART_VERSION ]]; then
          if [[ $EVENT_NAME == 'pull_request' ]]; then
            CHART_VERSION=${GITVERSION_MAJORMINORPATCH}-${PR_NUMBER}.${GITVERSION_PRERELEASENUMBER}
          else
            CHART_VERSION=$GITVERSION_SEMVER
          fi
        fi

        yq -i '.version = env(CHART_VERSION)' Chart.yaml

        echo chart_version=$CHART_VERSION >> $GITHUB_OUTPUT
      env:
        CHART_VERSION: ${{ inputs.chart_version }}
        CHART_NAME: ${{ steps.chart_metadata.outputs.name }}
        EVENT_NAME: ${{ github.event_name }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        STAGE: ${{ inputs.stage }}

    - name: Release Artifact
      id: release
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      run: |
        helm package . --version ${CHART_VERSION}${VERSION_SUFFIX:+-$VERSION_SUFFIX}
        helm push ${CHART_NAME}-${CHART_VERSION}${VERSION_SUFFIX:+-$VERSION_SUFFIX}.tgz oci://${REGISTRY}/helm-charts
        git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config --global user.name "$GITHUB_ACTOR"
        git add Chart.yaml
        git commit -m "chore: release chart $CHART_NAME $CHART_VERSION [skip ci]" || echo "nothing to commit, proceed"
        echo sha=$(git rev-parse HEAD) >> $GITHUB_OUTPUT
        git push
      env:
        REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        CHART_NAME: ${{ steps.chart_metadata.outputs.name }}
        CHART_VERSION: ${{ steps.release_prepare.outputs.chart_version }}
        VERSION_SUFFIX: ${{ inputs.version_suffix }}

    - name: GitHub Release
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch && inputs.independent_helm_versioning }}
      uses: softprops/action-gh-release@v1
      with:
        target_commitish: ${{ steps.release.outputs.sha }}
        tag_name: ${{ format('{0}-{1}', steps.chart_metadata.outputs.name, steps.release_prepare.outputs.chart_version) }}

    - name: Pull Helm Package
      if: ${{ inputs.stage == 'deploy' && ! inputs.chart_path }}
      shell: bash
      run: helm pull --untar --version ${CHART_VERSION}${VERSION_SUFFIX} oci://${{ steps.login_ecr.outputs.registry }}/helm-charts/${CHART_NAME}
      env:
        CHART_NAME: ${{ inputs.chart_name }}
        CHART_VERSION: ${{ inputs.chart_version }}
        VERSION_SUFFIX: ${{ inputs.version_suffix }}

    - name: Get Environment Specs
      id: environment_specs
      if: ${{ inputs.stage == 'deploy' }}
      shell: bash
      run: |
        echo aws_region=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-region"') >> $GITHUB_OUTPUT
        echo aws_iam_role=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-iam-role"') >> $GITHUB_OUTPUT
        echo cluster_name=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."cluster-name"') >> $GITHUB_OUTPUT
      env:
        ENV_SPEC: ${{ inputs.env_spec }}
        ENVIRONMENT: ${{ inputs.environment }}

    - name: Configure AWS Credentials
      if: ${{ inputs.stage == 'deploy' }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ steps.environment_specs.outputs.aws_region }}
        role-to-assume: ${{ steps.environment_specs.outputs.aws_iam_role }}
        role-session-name: GitHubActionsDeploySession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Update Kubeconfig
      if: ${{ inputs.stage == 'deploy' }}
      shell: bash
      run: aws eks update-kubeconfig --name $CLUSTER_NAME
      env:
        CLUSTER_NAME: ${{ steps.environment_specs.outputs.cluster_name }}

    - name: Helm Upgrade
      if: ${{ inputs.stage == 'deploy' }}
      shell: bash
      run: |
        ENVIRONMENT_PATH=${ENVIRONMENTS_PATH}/${ENVIRONMENT}
        ENVIRONMENT_SECRETS_DIR=${ENVIRONMENT_PATH}/secrets.d
        ENVIRONMENT_VALUES_DIR=${ENVIRONMENT_PATH}/values.d

        HELM_ARGS="--wait --cleanup-on-fail --history-max 3"

        if [[ -f ${ENVIRONMENT_PATH}/helmspec.yaml ]]; then
          RELEASE_NAME=$(yq '.releaseName | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
          RELEASE_NAMESPACE=$(yq '.releaseNamespace | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
        fi

        if [[ -d $ENVIRONMENT_SECRETS_DIR ]]; then
          for SECRET_FILE in $(ls $ENVIRONMENT_SECRETS_DIR); do
            sops -d $ENVIRONMENT_SECRETS_DIR/$SECRET_FILE > $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec"
          done
        fi

        if [[ -d $ENVIRONMENT_VALUES_DIR ]]; then
          for VALUES_FILE in $(ls $ENVIRONMENT_VALUES_DIR); do
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES_DIR/$VALUES_FILE"
          done
        fi

        if [[ -f ${ENVIRONMENT_PATH}/secrets.yaml ]]; then
          ENVIRONMENT_SECRETS="${ENVIRONMENT_PATH}/secrets.yaml"
          sops -d $ENVIRONMENT_SECRETS > ${ENVIRONMENT_SECRETS}.dec
          HELM_ARGS="$HELM_ARGS -f ${ENVIRONMENT_SECRETS}.dec"
        fi

        if [[ -f ${ENVIRONMENT_PATH}/values.yaml ]]; then
          ENVIRONMENT_VALUES="${ENVIRONMENT_PATH}/values.yaml"
          HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES"
        fi

        if [[ -n $CHART_PATH ]]; then
          CHART=$CHART_PATH
        else
          CHART=$CHART_NAME
        fi

        RELEASE_NAME=${RELEASE_NAME:-$CHART_NAME}
        RELEASE_NAMESPACE=${RELEASE_NAMESPACE:-$CHART_NAME}

        helm upgrade $RELEASE_NAME $CHART \
          --install \
          --namespace $RELEASE_NAMESPACE $HELM_ARGS
      env:
        ENVIRONMENTS_PATH: ${{ inputs.environments_path || format('charts/{0}/environments', inputs.chart_name) }}
        ENVIRONMENT: ${{ inputs.environment }}
        CHART_NAME: ${{ inputs.chart_name }}
        CHART_PATH: ${{ inputs.chart_path }}

    - name: Helm Rollback
      if: ${{ inputs.stage == 'rollback' }}
      shell: bash
      run: |
        ENVIRONMENT_PATH=${ENVIRONMENTS_PATH}/${ENVIRONMENT}

        if [[ -f ${ENVIRONMENT_PATH}/helmspec.yaml ]]; then
          RELEASE_NAME=$(yq '.releaseName | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
          RELEASE_NAMESPACE=$(yq '.releaseNamespace | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
        fi

        RELEASE_NAME=${RELEASE_NAME:-$CHART_NAME}
        RELEASE_NAMESPACE=${RELEASE_NAMESPACE:-$CHART_NAME}

        RELEASE_REVISION=$(helm history $RELEASE_NAME -o json -n $RELEASE_NAMESPACE | jq -r ---arg CHART $CHART_NAME-$CHART_VERSION '.[] | select(.chart == $CHART).revision')
        helm rollback $RELEASE_NAME $RELEASE_REVISION --wait --cleanup-on-fail -n $RELEASE_NAMESPACE
      env:
        ENVIRONMENTS_PATH: ${{ inputs.environments_path || format('charts/{0}/environments', inputs.chart_name) }}
        ENVIRONMENT: ${{ inputs.environment }}
        CHART_NAME: ${{ inputs.chart_name }}