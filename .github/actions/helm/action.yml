name: 'Helm CI'
description: ''

inputs:
  stage:
    description: ''
    required: true

outputs:
  chart_name:
    description: ''
    value: ${{ steps.release.outputs.chart_name }}
  chart_version:
    description: ''
    value: ${{ steps.release.outputs.chart_version }}

runs:
  using: "composite"
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.ECR_REGION }}

    - name: Login to Amazon ECR
      id: login_ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install Dependencies
      shell: bash
      working-directory: ${{ env.CHART_PATH }}
      run: helm dep up $CHART_NAME

    - name: Set up GIT
      shell: bash
      run: |
        git config --global user.email "github-actions@clickbus.com"
        git config --global user.name "Github Actions"

    - name: Release Prepare
      if: ${{ inputs.stage == 'release' }}
      shell: bash
      run: |
        if [[ -n $DOCKER_METADATA_OUTPUT_VERSION ]]; then
          yq -i '.appVersion = env(DOCKER_METADATA_OUTPUT_VERSION)' $CHART_NAME/Chart.yaml
        fi

        if [[ ${{ github.event_name }} == 'pull_request' ]]; then
          export CHART_VERSION=${GITVERSION_MAJORMINORPATCH}-${{ github.event.pull_request.number }}.${GITVERSION_PRERELEASENUMBER}
        else
          export CHART_VERSION=$GITVERSION_SEMVER
        fi

        if [[ ${{ github.ref_name }} == ${{ github.event.repository.default_branch }} ]]; then
          yq -i '.version = env(CHART_VERSION)' $CHART_NAME/Chart.yaml
          git add $CHART_NAME/Chart.yaml
          git commit -m "chore: release $CHART_VERSION [skip ci]" || echo "nothing to commit, proceed"
        fi

        echo CHART_VERSION=$CHART_VERSION >> $GITHUB_ENV

    - name: Helm Lint
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      working-directory: ${{ env.CHART_PATH }}
      run: helm lint --strict --with-subcharts $CHART_NAME

    - name: Helm Release
      id: release
      if: ${{ inputs.stage == 'release' }}
      shell: bash
      working-directory: ${{ env.CHART_PATH }}
      run: |
        helm package $CHART_NAME --version ${CHART_VERSION}${VERSION_SUFFIX}

        helm push ${CHART_NAME}-${CHART_VERSION}${VERSION_SUFFIX}.tgz oci://${{ steps.login_ecr.outputs.registry }}/helm-charts

        echo chart_version=$CHART_VERSION >> $GITHUB_OUTPUT