name: 'Docker CI'
description: ''

inputs:
  stage:
    description: ''
    required: true
  ecr_region:
    description: ''
    required: true
  actions_iam_role:
    description: ''
    required: true
  image_name:
    description: ''
    required: true
  image_tag:
    description: ''
    required: true
  dockerfile:
    description: ''
    required: false
    default: Dockerfile
  docker_build_context:
    description: ''
    required: false
    default: '.'
  docker_build_target:
    description: ''
    required: false
  docker_build_args:
    description: ''
    required: false
  docker_scan_fail_build:
    description: ''
    required: false
    default: 'true'
  docker_scan_severity_cutoff:
    description: ''
    required: false
    default: 'low'
  artifact_bucket_region:
    description: ''
    required: true
  artifact_bucket_name:
    description: ''
    required: true

outputs:
  image_tag:
    description: ''
    value: ${{ steps.docker_metadata.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ inputs.ecr_region }}
        role-to-assume: ${{ inputs.actions_iam_role }}
        role-session-name: GitHubActionsECRSession
        role-skip-session-tagging: true
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login_ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true

    - name: Docker Metadata
      id: docker_metadata
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.login_ecr.outputs.registry }}/${{ inputs.image_name }}
        tags: |
          type=raw,value=${{ inputs.image_tag }}

    - name: Lint
      if: ${{ inputs.stage == 'build' }}
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ inputs.dockerfile }}

    - name: Set up Docker Context for Buildx
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: docker context ls -q | grep -E '^(builders)$' || docker context create builders

    - name: Set up Docker Buildx
      if: ${{ inputs.stage == 'build' }}
      uses: docker/setup-buildx-action@v2
      with:
        endpoint: builders

    - name: Build Image
      if: ${{ inputs.stage == 'build' }}
      uses: docker/build-push-action@v4
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: ${{ inputs.docker_build_context }}
        file: ${{ inputs.dockerfile }}
        target: ${{ inputs.docker_build_target }}
        build-args: ${{ inputs.docker_build_args }}
        labels: ${{ steps.docker_metadata.outputs.labels }}
        tags: ${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }}
        load: true

    - name: Scan Image
      if: ${{ inputs.stage == 'build' }}
      uses: anchore/scan-action@v3
      with:
        image: ${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }}
        fail-build: ${{ inputs.docker_scan_fail_build }}
        severity-cutoff: ${{ inputs.docker_scan_severity_cutoff }}
        output-format: table
        only-fixed: true

    - name: Save Image
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: docker save -o docker-image.tar ${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }}

    - name: Archive Image Artifact
      if: ${{ inputs.stage == 'build' }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-upload@v1
      with:
        name: docker-image-${{ steps.docker_metadata.outputs.version }}
        paths: docker-image.tar
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    - name: Download Image Artifact
      if: ${{ inputs.stage == 'release' }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-download@v1
      with:
        name: docker-image-${{ steps.docker_metadata.outputs.version }}
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    - name: Release Image
      if: ${{ inputs.stage == 'release' }}
      shell: bash
      run: |
        docker load -i docker-image.tar
        docker push ${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }}