name: 'Node.js CI'
description: ''

inputs:
  stage:
    description: ''
    required: false
  node_version:
    description: ''
    required: false
  node_package_manager:
    description: ''
    required: false
  yarnrc:
    description: ''
    required: false
  npmrc:
    description: ''
    required: false
  codeartifact_region:
    description: ''
    required: false
  actions_iam_role:
    description: ''
    required: false
  package_version:
    description: ''
    required: false
  codeartifact_domain:
    description: ''
    required: false
  codeartifact_domain_owner:
    description: ''
    required: false
  node_build_env:
    description: ''
    required: false
  artifact_bucket_region:
    description: ''
    required: false
  artifact_bucket_name:
    description: ''
    required: false
  artifact_path:
    description: ''
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up Node.js (npm)
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version }}
        cache: npm

    - name: Install Yarn
      if: ${{ inputs.node_package_manager == 'yarn' }}
      shell: bash
      run: npm install --global yarn

    - name: Set up Node.js (yarn)
      if: ${{ inputs.node_package_manager == 'yarn' }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version }}
        cache: yarn

    - name: Create .npmrc
      if: ${{ inputs.node_package_manager == 'npm' && inputs.npmrc }}
      shell: bash
      run: echo "$NPMRC" > ~/.npmrc
      env:
        NPMRC: ${{ inputs.npmrc }}

    - name: Create .yarnrc.yml
      if: ${{ inputs.node_package_manager == 'yarn' && inputs.yarnrc }}
      shell: bash
      run: echo "$YARNRC" > ~/.yarnrc.yml
      env:
        YARNRC: ${{ inputs.yarnrc }}

    - name: Set up CodeArtifact Authorization Token
      uses: RocketBus/actions/.github/actions/utils/codeartifact@v1
      with:
        codeartifact_region: ${{ inputs.codeartifact_region }}
        actions_iam_role: ${{ inputs.actions_iam_role }}
        codeartifact_domain: ${{ inputs.codeartifact_domain }}
        codeartifact_domain_owner: ${{ inputs.codeartifact_domain_owner }}

    - name: Project Metadata
      id: metadata
      shell: bash
      run: |
        PACKAGE_NAME=$(jq -r ".name" package.json)
        echo artifact_name=$PACKAGE_NAME-$PACKAGE_VERSION >> $GITHUB_OUTPUT
        echo package_version=$PACKAGE_VERSION >> $GITHUB_OUTPUT
      env:
        PACKAGE_VERSION: ${{ inputs.package_version }}

    - name: Release Prepare
      shell: bash
      run: |
        if [[ $NODE_PACKAGE_MANAGER == 'npm' ]]; then
          npm version $PACKAGE_VERSION --no-git-tag-version --allow-same-version
        fi
        if [[ $NODE_PACKAGE_MANAGER == 'yarn' ]]; then
          yarn version --new-version $PACKAGE_VERSION --no-git-tag-version
        fi
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}
        PACKAGE_VERSION: ${{ steps.metadata.outputs.package_version }}

    - name: Set up Python 2
      uses: actions/setup-python@v3
      with:
        python-version: '2.x'

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ $NODE_PACKAGE_MANAGER == 'npm' ]]; then npm ci; fi
        if [[ $NODE_PACKAGE_MANAGER == 'yarn' ]]; then yarn install --frozen-lockfile; fi
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}

    - name: Lint Code
      if: ${{ inputs.stage == 'lint' }}
      shell: bash
      run: $NODE_PACKAGE_MANAGER run lint
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}

    - name: Check Build Script on package.json
      id: check_scripts
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: echo build=$(jq ".scripts | has(\"build\")" package.json) >> $GITHUB_OUTPUT

    - name: Build Artifact
      if: ${{ inputs.stage == 'build' && steps.check_scripts.outputs.build }}
      shell: bash
      run: $NODE_PACKAGE_MANAGER run build
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}
        NODE_BUILD_ENV: ${{ inputs.node_build_env }}
        PACKAGE_VERSION: ${{ steps.metadata.outputs.package_version }}

    - name: Archive Application Artifact
      if: ${{ inputs.stage == 'build' }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-upload@v1
      with:
        name: ${{ steps.metadata.outputs.artifact_name }}
        paths: ${{ inputs.artifact_path }}
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    - name: Run Tests
      if: ${{ inputs.stage == 'test' }}
      shell: bash
      run: $NODE_PACKAGE_MANAGER run test
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}

    - name: Download Application Artifact
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-download@v1
      with:
        name: ${{ steps.metadata.outputs.artifact_name }}
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    # - name: Release Artifact
    #   if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
    #   id: release
    #   shell: bash
    #   run: $NODE_PACKAGE_MANAGER publish --tag ${PACKAGE_VERSION}${NODE_BUILD_ENV:+-$NODE_BUILD_ENV}
    #   env:
    #     NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}
    #     PACKAGE_VERSION: ${{ steps.metadata.outputs.package_version }}
    #     NODE_BUILD_ENV: ${{ inputs.node_build_env }}
