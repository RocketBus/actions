name: 'Node.js CI'
description: ''

inputs:
  stage:
    description: ''
    required: true
  node_version:
    description: ''
    required: false
  node_package_manager:
    description: ''
    required: true
  yarnrc:
    description: ''
    required: false
  npmrc:
    description: ''
    required: false
  codeartifact_region:
    description: ''
    required: true
  actions_iam_role:
    description: ''
    required: true
  codeartifact_domain:
    description: ''
    required: true
  codeartifact_domain_owner:
    description: ''
    required: true
  node_build_env:
    description: ''
    required: false
  artifact_bucket_region:
    description: ''
    required: true
  artifact_bucket_name:
    description: ''
    required: true
  artifact_path:
    description: ''
    required: false

outputs:
  version:
    description: ''
    value: ${{ steps.release_prepare.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Determine Version
      id: gitversion
      if: ${{ ! env.GITVERSION_SEMVER }}
      uses: gittools/actions/gitversion/execute@v0
      with:
        additionalArguments: >
          /overrideconfig major-version-bump-message="^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\([\\w\\s-]*\\))?(!:|:.*\\n\\n((.+\\n)+\\n)?BREAKING CHANGE:\\s.+)"
          /overrideconfig minor-version-bump-message="^(feat)(\\([\\w\\s-]*\\))?:"
          /overrideconfig patch-version-bump-message="^(build|chore|ci|docs|fix|perf|refactor|revert|style|test)(\\([\\w\\s-]*\\))?:"

    - name: Set up Node.js (npm)
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version || '18' }}
        cache: npm

    - name: Install Yarn
      if: ${{ inputs.node_package_manager == 'yarn' }}
      shell: bash
      run: npm install --global yarn

    - name: Set up Node.js (yarn)
      if: ${{ inputs.node_package_manager == 'yarn' }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version }}
        cache: yarn

    - name: Create .npmrc
      if: ${{ inputs.node_package_manager == 'npm' && inputs.npmrc }}
      shell: bash
      run: echo $NPMRC > ~/.npmrc
      env:
        NPMRC: ${{ inputs.npmrc }}

    - name: Create .yarnrc.yml
      if: ${{ inputs.node_package_manager == 'yarn' && inputs.yarnrc }}
      shell: bash
      run: echo $YARNRC > ~/.yarnrc.yml
      env:
        YARNRC: ${{ inputs.yarnrc }}

    - name: Set up CodeArtifact Authorization Token
      uses: RocketBus/actions/.github/actions/utils/codeartifact@v1
      with:
        codeartifact_region: ${{ inputs.codeartifact_region }}
        actions_iam_role: ${{ inputs.actions_iam_role }}
        codeartifact_domain: ${{ inputs.codeartifact_domain }}
        codeartifact_domain_owner: ${{ inputs.codeartifact_domain_owner }}

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ $NODE_PACKAGE_MANAGER == 'npm' ]]; then npm ci; fi
        if [[ $NODE_PACKAGE_MANAGER == 'yarn' ]]; then yarn install --frozen-lockfile; fi
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}

    - name: Release Prepare
      id: release_prepare
      shell: bash
      run: |
        if [[ $NODE_PACKAGE_MANAGER == 'npm' ]]; then
          npm version $GITVERSION_SEMVER --no-git-tag-version --allow-same-version
        fi
        if [[ $NODE_PACKAGE_MANAGER == 'yarn' ]]; then
          yarn version --new-version $GITVERSION_SEMVER --no-git-tag-version
        fi

        echo version=$VERSION >> $GITHUB_OUTPUT
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}
        STAGE: ${{ inputs.stage }}

    - name: Lint Code
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: $NODE_PACKAGE_MANAGER run lint
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}

    - name: Check Build Script on package.json
      id: check_scripts
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: echo build=$(jq ".scripts | has(\"build${NODE_BUILD_ENV:+:$NODE_BUILD_ENV}\")" package.json) >> $GITHUB_OUTPUT

    - name: Build Artifact
      if: ${{ inputs.stage == 'build' && steps.check_scripts.outputs.build }}
      shell: bash
      run: $NODE_PACKAGE_MANAGER run build${NODE_BUILD_ENV:+:$NODE_BUILD_ENV}
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}
        NODE_BUILD_ENV: ${{ inputs.node_build_env }}

    - name: Get Package Info
      id: package_info
      shell: bash
      run: |
        PACKAGE=$(jq ".package" package.json)
        VERSION=$(jq ".version" package.json)
        VERSION_SUFFIX=${NODE_BUILD_ENV:+-$NODE_BUILD_ENV}

        echo package=$PACKAGE >> $GITHUB_OUTPUT
        echo version=${VERSION}${VERSION_SUFFIX} >> $GITHUB_OUTPUT
        echo artifact_name=${PACKAGE}-${VERSION}${VERSION_SUFFIX} >> $GITHUB_OUTPUT

    - name: Archive Application Artifact
      if: ${{ inputs.stage == 'build' }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-upload@v1
      with:
        name: ${{ steps.package_info.outputs.artifact_name }}
        paths: ${{ inputs.artifact_path || 'build/' }}
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    - name: Run Tests
      if: ${{ inputs.stage == 'test' }}
      shell: bash
      run: $NODE_PACKAGE_MANAGER run test
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}

    - name: Set up SonarQube Args
      id: setup_sonar_args
      if: ${{ inputs.stage == 'test' }}
      shell: bash
      run: |
        if [[ $EVENT_NAME == 'pull_request' ]]; then
          SONAR_ARGS="-Dsonar.pullrequest.key=$PR_NUMBER \
            -Dsonar.pullrequest.branch=$HEAD_REF \
            -Dsonar.pullrequest.base=$BASE_REF \
            -Dsonar.pullrequest.github.repository=$GITHUB_REPOSITORY"
        elif [[ $EVENT_NAME == 'push' && $REF_NAME != $DEFAULT_BRANCH ]]; then
          SONAR_ARGS="-Dsonar.branch.name=$REF_NAME"
        fi

        echo "args=$SONAR_ARGS" >> $GITHUB_OUTPUT
      env:
        EVENT_NAME: ${{ github.event_name }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        HEAD_REF: ${{ github.head_ref }}
        BASE_REF: ${{ github.base_ref }}
        REF_NAME: ${{ github.ref_name }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

    - name: SonarQube Scan
      if: ${{ inputs.stage == 'test' }}
      uses: sonarsource/sonarqube-scan-action@master
      with:
        args: ${{ steps.setup_sonar_args.outputs.args }}

    - name: SonarQube Quality Gate Check
      if: ${{ inputs.stage == 'test' }}
      uses: sonarsource/sonarqube-quality-gate-action@master

    - name: Download Application Artifact
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      uses: RocketBus/actions/.github/actions/utils/s3-artifact-download@v1
      with:
        name: ${{ steps.package_info.outputs.artifact_name }}
        bucket_region: ${{ inputs.artifact_bucket_region }}
        bucket_name: ${{ inputs.artifact_bucket_name }}
        actions_iam_role: ${{ inputs.actions_iam_role }}

    - name: Release Artifact
      id: release
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      shell: bash
      run: |
        $NODE_PACKAGE_MANAGER publish --tag $VERSION
        git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config --global user.name "$GITHUB_ACTOR"
        git commit -a -m "chore: release $GITVERSION_SEMVER [skip ci]" || echo "nothing to commit, proceed"
        echo sha=$(git rev-parse HEAD) >> $GITHUB_OUTPUT
        echo version=$GITVERSION_SEMVER >> $GITHUB_OUTPUT
        git push
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}
        VERSION: ${{ steps.package_info.outputs.version }}

    - name: GitHub Release
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      uses: softprops/action-gh-release@v1
      with:
        target_commitish: ${{ steps.release.outputs.sha }}
        tag_name: v${{ steps.release.outputs.version }}

    - name: Bump Version
      if: ${{ inputs.stage == 'release' && github.ref_name == github.event.repository.default_branch }}
      shell: bash
      run: |
        if [[ $NODE_PACKAGE_MANAGER == 'npm' ]]; then
          npm version patch --no-git-tag-version
        fi
        if [[ $NODE_PACKAGE_MANAGER == 'yarn' ]]; then
          yarn version --patch --no-git-tag-version
        fi

        git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config --global user.name "$GITHUB_ACTOR"
        git commit -a -m "chore: bump version [skip ci]" || echo "nothing to commit, proceed"
        git push
      env:
        NODE_PACKAGE_MANAGER: ${{ inputs.node_package_manager }}