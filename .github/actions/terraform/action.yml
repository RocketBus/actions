name: 'Terraform CI'
description: ''

inputs:
  stage:
    description: ''
    required: true
  terraform_version:
    description: ''
    required: false

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.terraform_version || '1.5.4' }}

    - name: Cache Plugin Dir
      if: ${{ inputs.stage == 'build' }}
      uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - name: Setup TFLint
      if: ${{ inputs.stage == 'build' }}
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: ${{ inputs.tflint_version || 'v0.47.0' }}

    - name: Init TFLint
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: tflint --init
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: tflint -f compact --recursive --minimum-failure-severity=warning --color

    - name: Terraform Init
      if: ${{ inputs.stage == 'build' }}
      shell: bash
      run: terraform init -input=false

    - name: Terraform Validate
      if: ${{ inputs.stage == 'build' }}
      id: validate
      shell: bash
      run: terraform validate -input=false

    - name: Terraform Plan
      if: ${{ inputs.stage == 'build' }}
      id: plan
      shell: bash
      run: terraform plan -input=false

    - name: Comment in PR
      if: ${{ inputs.stage == 'build' && github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ github.token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }