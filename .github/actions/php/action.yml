name: 'PHP CI'
description: ''

inputs:
  stage:
    description: ''
    required: true
  composer_version:
    description: ''
    required: true
  php_version:
    description: ''
    required: true
  codeartifact_region:
    description: ''
    required: false
  actions_iam_role:
    description: ''
    required: false
  package_version:
    description: ''
    required: true
  codeartifact_domain:
    description: ''
    required: false
  codeartifact_domain_owner:
    description: ''
    required: false
  artifact_bucket_region:
    description: ''
    required: false
  artifact_bucket_name:
    description: ''
    required: false
  artifact_path:
    description: ''
    required: false

runs:
  using: "composite"
  steps:
  # prepare
    - name: Project Metadata
      id: metadata
      shell: bash
      run: |
        PACKAGE_NAME=$(jq -r '.name' composer.json | cut -d'/' -f2)
        echo artifact_name=$PACKAGE_NAME-$PACKAGE_VERSION >> $GITHUB_OUTPUT
        echo package_version=$PACKAGE_VERSION >> $GITHUB_OUTPUT
      env:
        PACKAGE_VERSION: ${{ inputs.package_version }}

    - name: Release Prepare
      shell: bash
      run: |
        jq --arg PACKAGE_VERSION $PACKAGE_VERSION '.version = $PACKAGE_VERSION' composer.json > composer.json.tmp
        mv composer.json.tmp composer.json 
      env:
        PACKAGE_VERSION: ${{ steps.metadata.outputs.package_version }}

  # setup tools
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/composer-cache
        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

    - name: Install dependencies
      uses: php-actions/composer@v6
      env:
        COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ env.GIT_ACCESS_TOKEN }}"}}'
      with:
        version: ${{ inputs.composer_version }}
        php_version: ${{ inputs.php_version }}
        php_extensions: xml mbstring xdebug
        args: "--optimize-autoloader --ignore-platform-reqs"

  # lint: code_sniffer
    - name: Lint Code
      if: ${{ inputs.stage == 'lint' }}
      shell: bash
      run: vendor/bin/phpcs

  # test: phpunit
    - name: Run Tests
      if: ${{ inputs.stage == 'test' }}
      shell: bash
      run: vendor/bin/phpunit -c app